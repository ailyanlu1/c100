VERTEX
private:
  string name // name of current vertex
  Vertex * pre // pointer to preceding index
  bool visited // flag to tell if vertex has been visited
  vector<Edge> edgeList // list of edges connected to this vertex

public:
  /* used for dijkstra */
  int dist;

  /* constructor */
  Vertex( string id )

  /* destructor
   * calls clear on edgelist, destruction of vertex in Graph */
  ~Vertex()

  bool getStatus();
  void setStatus( bool stat );

  string getName();

  Vertex * getPre();
  void setPre( Vertex * set );

  /* check if edge exists between this and v */
  bool existEdge( Vertex * v );
  
  /* add vertex with this as originator, connect edge between and add to list */
  void addAdjVertex( Vertex * adj, int cost, int time );

  /* output edgeList */
  void printList();

  /* return edgeList */
  vertex<Edge> getEdges();


EDGE
private:
  Vertex * start;
  Vertex * end;
  int cost;
  int time;

public:
  /* constructor */
  Edge( Vertex * st, Vertex * en, int inCost, inTime )

  Vertex * getEnd();
  Vertex * getStart();
  int getCost();
  int getTime();


GRAPH
private:
  vector<Vertex *> vList;
  bool cycle;

public:
  /* Constructor */
  Graph();

  /* Destructor */
  ~Graph();

  /* find min spanning tree */
  Graph * MST();  
 
  int dijkstra();

  void displayGraph();
  int totalCost();
  int totalTime();

  /* adds vertex to vList */
  void addVertex( Vertex * ve );

  /* return vertex if found, else NULL */
  Vertex* findVertex( string name );
  
  /* clears status of all vertices */
  void reset()
